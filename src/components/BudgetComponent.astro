---
import BudgetTransaction from "./BudgetTransaction.astro";

interface Props {
	label: string;
	maximum: number;
	spent: number;
	theme: string;
}
const { label, maximum, spent, theme } = Astro.props;

import data from "../data.json";
import type TransactionType from "@lib/transaction";

let transactions: TransactionType[] = [];
data.transactions.forEach((transaction) => {
	if (transactions.length == 3) return;
	if (transaction.category === label) {
		transactions.push(transaction);
	}
});
---

<div class="container">
	<div class="header">
		<span class="accentDot" style=`background-color: ${theme}`></span>
		<h2>{label}</h2>
		<button><img src="/images/icon-ellipsis.svg" alt="" /></button>
	</div>
	<h3 class="maximum">Maximum of ${maximum.toFixed(2)}</h3>
	<span class="bar">
		<span
			style=`background-color: ${theme}; width: ${(spent / maximum) * 100}% `
			class="progress"></span>
	</span>
	<div class="amounts">
		<div>
			<span style=`background-color: ${theme}`></span>
			<div class="spent">
				<p>Spent</p>
				<h3>${spent.toFixed(2)}</h3>
			</div>
		</div>
		<div>
			<span></span>
			<div class="free">
				<p>Free</p>
				<h3>${(maximum - spent).toFixed(2)}</h3>
			</div>
		</div>
	</div>
	<div class="latestSpending">
		<div class="sectionHeader">
			<h2>Latest spending</h2>
			<a href={"/transactions?category=" + label + "&sorting=Latest"}
				>See All <img src="/images/icon-caret-right.svg" alt="" /></a
			>
		</div>

		<div class="transactions">
			{
				transactions.map((transaction) => (
					<hr/>
					<BudgetTransaction transaction={transaction} imageHidden={true} />
				))
			}
		</div>
	</div>
</div>

<style lang="scss">
	.container {
		display: flex;
		flex-direction: column;
		background-color: var(--primary-900);
		padding: 1.25rem;
		gap: 1rem;
		border-radius: 0.75rem;
	}
	.header {
		display: flex;
		align-items: center;
		button {
			border: 0;
			background-color: transparent;
			width: fit-content;
			padding: 0.5rem;
			height: auto;
			margin-left: auto;
			img {
				object-fit: contain;
				width: 1.25rem;
				height: auto;
			}
		}
	}
	.bar {
		width: 100%;
		height: 2rem;
		background-color: var(--neutral-light-beige);
		border-radius: 0.25rem;
		padding: 0.25rem;
		.progress {
			height: 100%;
			border-radius: 0.25rem;
			max-width: 100%;
			display: block;
		}
	}

	.accentDot {
		width: 1rem;
		height: 1rem;
		border-radius: 100vw;
		margin-right: 0.5rem;
	}

	.maximum {
		font-size: var(--fs-body-sm);
		color: var(--neutral-dark-grey);
		font-weight: var(--fw-regular);
	}
	.amounts {
		display: flex;
		gap: 1rem;
		background-color: var(--primary-900);
		div {
			display: flex;
			flex-direction: row;
			gap: 0 1rem;
			width: calc(50% - 0.5rem);

			span {
				width: 0.25rem;
				border-radius: 100vw;
				min-height: 2rem;
				background-color: var(--neutral-light-beige);
			}
			.spent,
			.free {
				display: flex;
				flex-direction: column;
				gap: 0.25rem;
				p {
					font-size: var(--fs-smallest);
				}
				h3 {
					font-size: var(--fs-body-sm);
					font-weight: var(--fw-bold);
				}
			}
		}
	}
	.latestSpending {
		background-color: var(--neutral-light-beige);
		padding: 1rem;
		border-radius: 0.75rem;
	}
	.sectionHeader {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1rem;
		
		a {
			font-size: var(--fs-body-sm);
			font-weight: var(--fw-regular);
			color: var(--neutral-dark-grey);
			opacity: 0.8;
			text-decoration: none;
			display: flex;
			align-items: center;
			gap: 0.5rem;
			img{
				object-fit: contain;
				width: .25rem;
			}
		}
		h2 {
			font-size: var(--fs-body);
			color: var(--primary-100);
		}
	}
	.transactions {
		
		hr{
			color: var(--neutral-dark-grey);
			opacity: .3;
			width: 100%;
			&:first-of-type {
				display: none;
			}
		}
	}
</style>
