---
import BudgetTransaction from "./BudgetTransaction.astro";

interface Props {
	label: string;
	saved: number;
	target: number;
	theme: string;
}
const { label, saved, target, theme } = Astro.props;

import data from "../data.json";
import type TransactionType from "@lib/transaction";

let transactions: TransactionType[] = [];
data.transactions.forEach((transaction) => {
	if (transactions.length == 3) return;
	if (transaction.category === label) {
		transactions.push(transaction);
	}
});
---

<div class="container">
	<div class="header">
		<span class="accentDot" style=`background-color: ${theme}`></span>
		<h2>{label}</h2>
		<button class="potMenuBtn" aria-label="Open menu"
			><img src="/images/icon-ellipsis.svg" alt="Open menu" /></button
		>
		<div class=`potMenu${label} potMenu`>
			<button class="editDialogBtn">Edit pot</button>
			<button class="deleteDialogBtn">Delete pot</button>
		</div>
	</div>
	<div class="totalSaved">
		<h3 class="maximum">Total saved</h3>
		<h2 class="totalSaved">${saved.toFixed(2)}</h2>
	</div>

	<span class="bar">
		<span
			style=`background-color: ${theme}; width: ${(saved / target) * 100}% `
			class="progress"></span>
	</span>
	<div class="percentageTarget">
		<h3 class="percentage">{((saved / target) * 100).toFixed(2)}%</h3>
		<h3 class="target">Target of ${target.toFixed(2)}</h3>
	</div>
	<div class="addWithdrawButtons">
		<button class="addMoneyBtn">+ Add Money</button>
		<button class="withdrawBtn">Withdraw</button>
	</div>
</div>
<dialog class="editDialog">
	<div class="dialogWrapper">
		<div class="dialogHeader">
			<h2>Edit Pot</h2>
			<button class="closeEditDialog"
				><img src="/images/icon-close.svg" alt="Close window" /></button
			>
		</div>
		<p>
			Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus
			hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet.
		</p>
		<form class="dialogForm">
			<div>
				<label for=`potCategory${label}`>Pot Category</label>
				<input
					type="text"
					name=`potCategory${label}`
					id=`potCategory${label}`
					placeholder="e.g Rainy Days"
					max="30"
					value={label}
				/>
			</div>
			<div>
				<label for=`maximumSpend${label}`>Maximum Spend</label>
				<input
					type="number"
					name=`maximumSpend${label}`
					id=`maximumSpend${label}`
					placeholder="$ e.g 2000"
					value={String(target)}
				/>
			</div>
			<div>
				<label for=`theme${label}`>Theme</label>
				<select name=`theme${label}` id=`theme${label}`>
					<option selected={label === "Green" ? true : null} value="Green"
						>Green</option
					>
					<option selected={label === "Yellow" ? true : null} value="Yellow"
						>Yellow</option
					>
					<option selected={label === "Cyan" ? true : null} value="Cyan"
						>Cyan</option
					>
					<option selected={label === "Navy" ? true : null} value="Navy"
						>Navy</option
					>
					<option selected={label === "Red" ? true : null} value="Red"
						>Red</option
					>
					<option selected={label === "Purple" ? true : null} value="Purple"
						>Purple</option
					>
					<option
						selected={label === "Turquoise" ? true : null}
						value="Turquoise">Turquoise</option
					>
					<option selected={label === "Brown" ? true : null} value="Brown"
						>Brown</option
					>
					<option selected={label === "Magenta" ? true : null} value="Magenta"
						>Magenta</option
					>
					<option selected={label === "Blue" ? true : null} value="Blue"
						>Blue</option
					>
					<option
						selected={label === "Navy Grey" ? true : null}
						value="Navy Grey">Navy Grey</option
					>
					<option
						selected={label === "Army Green" ? true : null}
						value="Army Green">Army Green</option
					>
					<option selected={label === "Pink" ? true : null} value="Pink"
						>Pink</option
					>
					<option selected={label === "Gold" ? true : null} value="Gold"
						>Gold</option
					>
					<option selected={label === "Orange" ? true : null} value="Orange"
						>Orange</option
					>
				</select>
			</div>
			<button>Save changes</button>
		</form>
	</div>
</dialog>
<dialog class="deleteDialog">
	<div class="dialogWrapper">
		<div class="dialogHeader">
			<h2>Delete '{label}'?</h2>
			<button class="deleteDialogClose"
				><img src="/images/icon-close.svg" alt="Close window" /></button
			>
		</div>
		<p>
			Are you sure you want to delete this pot? This action cannot be reversed,
			and all the data inside it will be removed forever.
		</p>
		<form class="buttons">
			<button type="submit">Yes, confirm deletion</button>
			<button class="cancelBtn" type="button">No, I want to go back</button>
		</form>
	</div>
</dialog>

<dialog class="withdrawDialog">
	<div class="dialogWrapper">
		<div class="dialogHeader">
			<h2>Withdraw from ‘{label}’</h2>
			<button class="withdrawDialogClose"
				><img src="/images/icon-close.svg" alt="Close window" /></button
			>
		</div>
		<p>
			Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus
			hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet.
		</p>
		<div class="totalSaved">
			<p>New amount</p>
			<h2 class="withdrawNewAmount">${saved.toFixed(2)}</h2>
		</div>
		<div class="bar">
			<div
				class="progressWithdrawMoney"
				style=`width: ${((saved / target) * 100)}%; background-color: ${theme}`>
			</div>
		</div>
		<div class="percentageTarget">
			<h3 class="percentage withdrawMoneyPercentage">
				{((saved / target) * 100).toFixed(2)}%
			</h3>
			<h3 class="target">Target of ${target}</h3>
			<h3 class="targetVar" style="display: none;">{target}</h3>
		</div>
		<form class="withdrawForm">
			<label for=`amountToWithdraw${label}`>Amount to withdraw</label>
			<div>
				<span>$</span>
				<input
					type="number"
					name=`amountToWithdraw${label}`
					id=`amountToWithdraw${label}`
					min="0"
					class="withdrawMoneyInput"
					max={saved}
					required
				/>
			</div>

			<button>Confirm Withdrawal</button>
		</form>
	</div>
</dialog>

<dialog class="addMoneyDialog">
	<div class="dialogWrapper">
		<div class="dialogHeader">
			<h2>Add to ‘{label}’</h2>
			<button class="addMoneyDialogClose"
				><img src="/images/icon-close.svg" alt="Close window" /></button
			>
		</div>
		<p>
			Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus
			hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet.
		</p>
		<div class="totalSaved">
			<p>New amount</p>
			<h2 class="newAmount">${saved.toFixed(2)}</h2>
		</div>
		<div class="bar">
			<div
				class="progressAddMoney"
				style=`width: ${((saved / target) * 100)}%; background-color: ${theme}`>
			</div>
		</div>
		<div class="percentageTarget">
			<h3 class="addMoneyPercentage percentage">
				{((saved / target) * 100).toFixed(2)}%
			</h3>
			<h3 class="target">Target of ${target}</h3>
		</div>
		<form class="addMoneyForm">
			<label for=`amountToAdd${label}`>Amount to Add</label>
			<div>
				<span>$</span>
				<input
					type="number"
					class="amountToAddInput"
					name=`amountToAdd${label}`
					id=`amountToAdd${label}`
					min="0"
					max={data.balance.current}
					required
				/>
			</div>

			<button type="submit">Confirm Addition</button>
		</form>
	</div>
</dialog>

<style lang="scss">
	.container {
		display: flex;
		flex-direction: column;
		background-color: var(--primary-900);
		padding: 1.25rem;
		gap: 1rem;
		border-radius: 0.75rem;
	}
	.header {
		display: flex;
		align-items: center;
		position: relative;
		button {
			border: 0;
			background-color: transparent;
			width: fit-content;
			padding: 0.5rem;
			height: auto;
			margin-left: auto;
			img {
				object-fit: contain;
				width: 1.25rem;
				height: auto;
			}
			&:hover,
			&:active,
			&:focus {
				cursor: pointer;
			}
		}
		h2 {
			font-size: var(--fs-heading-2);
		}
	}

	.bar {
		width: 100%;
		height: 0.5rem;
		background-color: var(--neutral-light-beige);
		border-radius: 0.25rem;

		.progress,
		.progressAddMoney,
		.progressWithdrawMoney {
			height: 100%;
			border-radius: 0.25rem;
			max-width: 100%;
			display: block;
		}
	}

	.totalSaved {
		display: flex;
		justify-content: space-between;
		align-items: center;
		h3 {
			font-size: var(--fs-body-sm);
			color: var(--neutral-dark-grey);
			font-weight: var(--fw-regular);
		}
		h2 {
			font-size: var(--fs-heading-1);
		}
	}
	.percentageTarget {
		display: flex;
		justify-content: space-between;
		.percentage,
		.target {
			font-size: var(--fs-smallest);
			color: var(--neutral-dark-grey);
		}
		.percentage {
			font-weight: var(--fw-bold);
		}
		.target {
			font-weight: var(--fw-regular);
		}
	}
	.addWithdrawButtons {
		display: flex;
		justify-content: space-between;
		gap: 1rem;
		margin-block: 2rem;
		button {
			width: calc(50% - 0.5rem);
			border: 0;
			background-color: var(--neutral-light-beige);
			font-weight: var(--fw-bold);
			color: var(--primary-100);
			font-size: var(--fs-body-sm);
			padding: 1rem;
			border-radius: 0.5rem;
			transition: 150ms linear;
			&:hover,
			&:active,
			&:focus {
				cursor: pointer;
				background-color: var(--primary-900);
				transition: 150ms linear;
				outline: 1px solid var(--primary-100);
			}
		}
	}
	.accentDot {
		width: 1rem;
		height: 1rem;
		border-radius: 100vw;
		margin-right: 0.5rem;
	}

	.potMenu {
		display: none;
		flex-direction: column;
		border-radius: 0.5rem;
		position: absolute;
		background-color: var(--primary-900);
		z-index: 100;
		top: 100%;
		right: 0;
		border: 1px solid var(--neutral-dark-grey);
		box-shadow: 0px 0px 15px 0px var(--neutral-dark-grey);
		button {
			width: 100%;
			background-color: transparent;
			color: var(--primary-100);
			border: 0;
			padding: 0.5rem;
			border-radius: 0.25rem;
			transition: 150ms linear;
			&:first-of-type {
				border-bottom: 1px solid var(--neutral-grey);
			}
			&:hover,
			&:active,
			&:focus {
				background-color: var(--neutral-dark-grey);
				color: var(--primary-900);
				transition: 150ms linear;
			}
		}
	}
	.potMenuVisible {
		display: flex;
	}

	dialog {
		border: 0;
		border-radius: 0.75rem;
	}

	.dialogWrapper {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		p {
			font-size: var(--fs-body-sm);
			color: var(--neutral-dark-grey);
			line-height: 150%;
		}
	}
	.dialogHeader {
		display: flex;
		justify-content: space-between;
		align-items: center;
		h2 {
			font-size: var(--fs-heading-2);
			color: var(--primary-100);
		}
		button {
			display: grid;
			place-items: center;
			border-radius: 50%;
			width: 1.5rem;
			height: 1.5rem;
			aspect-ratio: 1;
			border: 1px solid var(--neutral-dark-grey);
			background-color: transparent;
			&:focus,
			&:active,
			&:hover {
				cursor: pointer;
			}
		}
	}

	.dialogForm {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		select,
		option {
			max-height: 200px;

			overflow-y: auto;
			&:focus,
			&:active,
			&:hover {
				cursor: pointer;
			}
		}
		div {
			display: flex;
			flex-direction: column;
			label {
				font-size: var(--fs-smallest);
				color: var(--neutral-dark-grey);
			}
			input,
			select {
				padding: 0.5rem;
				border-radius: 0.5rem;
				border: 1px solid var(--neutral-dark-grey);
				font-size: var(--fs-body-sm);
				&:focus,
				&:active,
				&:hover {
					cursor: pointer;
				}
			}
		}

		button {
			background-color: var(--primary-100);
			color: var(--primary-900);
			border-radius: 0.5rem;
			border: 0;
			cursor: pointer;
			padding-block: 1em;
			font-size: var(--fs-body-sm);
			font-weight: var(--fw-bold);
			margin-top: 1rem;
			&:focus,
			&:active,
			&:hover {
				cursor: pointer;
			}
		}
	}
	.buttons {
		button {
			display: flex;
			flex-direction: column;
			background-color: transparent;
			border-radius: 0.5rem;
			border: 0;
			width: 100%;
			text-align: center;
			font-size: var(--fs-body-sm);
			font-weight: var(--fw-regular);
			padding: 1em;
			display: grid;
			place-items: center;
			&:focus,
			&:active,
			&:hover {
				cursor: pointer;
			}
			&:first-of-type {
				background-color: var(--secondary-red);
				color: var(--primary-900);
				font-weight: var(--fw-bold);
			}
		}
	}
	.deleteDialog {
		max-width: 300px;
	}

	.addMoneyForm,
	.withdrawForm {
		display: flex;
		flex-direction: column;
		label {
			font-size: var(--fs-smallest);
			color: var(--neutral-dark-grey);
			font-weight: var(--fw-bold);
		}
		div {
			display: flex;
			align-items: center;
			border-radius: 0.5rem;
			border: 1px solid var(--neutral-grey);
			padding: 0.125rem;
			span {
				color: var(--neutral-dark-grey);
				font-size: var(--fs-body-sm);
				margin-left: 0.5rem;
			}
			input {
				font-size: var(--fs-body-sm);
				border: 0;
				outline: 0;
				padding: 0.25rem;
				background-color: transparent;
				width: 100%;
			}
		}
		button {
			font-size: var(--fs-body-sm);
			font-weight: var(--fw-bold);
			margin-top: 1rem;
			background-color: var(--primary-100);
			color: var(--primary-900);
			border-radius: 0.5rem;
			border: 0;
			cursor: pointer;
			padding-block: 1em;
			&:focus,
			&:active,
			&:hover {
				cursor: pointer;
			}
		}
	}

	@media screen and (min-width: 768px) {
		.container {
			padding: 2rem;
			gap: 1.25rem;
		}
		.buttons {
			margin-block: 2rem 1rem;
		}
		dialog {
			max-width: 300px;
		}
	}

	@media screen and (min-width: 1920px) {
		.accentDot {
			width: 1.5rem;
			height: 1.5rem;
		}
		.header {
			h2 {
				font-size: var(--fs-heading-1);
			}
		}

		.bar {
			height: 3rem;
		}
	}
</style>
