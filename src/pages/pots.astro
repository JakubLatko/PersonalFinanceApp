---
import Layout from "../layouts/Layout.astro";
import data from "../data.json";
import PotComponent from "@components/PotComponent.astro";
---

<Layout title="Dupa">
	<main>
		<section class="headerSection">
			<h1>Pots</h1>
			<button class="addNewPotBtn">+ Add New Pot</button>
		</section>
		<section class="potComponentSection">
			{
				data.pots.map((pot) => (
					<PotComponent
						saved={pot.total}
						target={pot.target}
						label={pot.name}
						theme={pot.theme}
					/>
				))
			}
		</section>
	</main>

	<dialog class="addNewPotDialog">
		<div class="dialogWrapper">
			<div class="dialogHeader">
				<h2>Add new Pot</h2>
				<button class="closeAddNewPotDialog"
					><img src="/images/icon-close.svg" alt="Close window" /></button
				>
			</div>
			<p>
				Create a pot to set savings targets. These can help keep you on track as
				you save for special purchases.
			</p>
			<form class="dialogForm">
				<div>
					<label for="potName">Pot Category</label>
					<input
						type="text"
						name="potName"
						id="potName"
						placeholder="e.g Rainy Days"
						max="30"
					/>
				</div>
				<div>
					<label for="targetForPot">Target</label>
					<input
						placeholder="$ e.g 2000"
						type="number"
						name="targetForPot"
						id="targetForPot"
					/>
				</div>
				<div>
					<label for="theme">Theme</label>
					<select name="theme" id="theme">
						<option value="Green"> Green</option>
						<option value="Yellow"> Yellow</option>
						<option value="Cyan"> Cyan</option>
						<option value="Navy"> Navy</option>
						<option value="Red"> Red</option>
						<option value="Purple"> Purple</option>
						<option value="Turquoise"> Turquoise</option>
						<option value="Brown"> Brown</option>
						<option value="Magenta"> Magenta</option>
						<option value="Blue"> Blue</option>
						<option value="Navy Grey"> Navy Grey</option>
					</select>
				</div>
				<button>Add pot</button>
			</form>
		</div>
	</dialog>
</Layout>

<style lang="scss">
	main {
		display: flex;
		flex-direction: column;
		margin-inline: auto;
		padding: 1rem;
		width: 100%;
		margin-block-end: 5rem;
	}
	h1 {
		font-size: var(--fs-heading-1);
		color: var(--primary-100);
	}

	section {
		background-color: var(--primary-900);

		border-radius: 0.75rem;
		&:first-of-type {
			background-color: var(--neutral-light-beige);
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			margin-block: 2rem 3rem;
			padding: 0;
			button {
				background-color: var(--primary-100);
				color: var(--primary-900);
				border: 0;
				border-radius: 0.5rem;
				padding: 1rem 1rem;
				font-size: var(--fs-body-sm);
				transition: 150ms linear;
				&:hover,
				&:active,
				&:focus {
					cursor: pointer;
					opacity: 0.7;
					transition: 150ms linear;
				}
			}
		}
	}
	.potComponentSection {
		display: flex;
		flex-direction: column;
		gap: 2rem;
		background-color: var(--neutral-light-beige);
	}

	dialog {
		border: 0;
		border-radius: 0.75rem;
	}

	.dialogWrapper {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		p {
			font-size: var(--fs-body-sm);
			color: var(--neutral-dark-grey);
			line-height: 150%;
		}
	}
	.dialogHeader {
		display: flex;
		justify-content: space-between;
		align-items: center;
		h2 {
			font-size: var(--fs-heading-2);
			color: var(--primary-100);
		}
		button {
			display: grid;
			place-items: center;
			border-radius: 50%;
			width: 1.5rem;
			height: 1.5rem;
			aspect-ratio: 1;
			border: 1px solid var(--neutral-dark-grey);
			background-color: transparent;
		}
	}
	.dialogForm {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		select,
		option {
			max-height: 200px;

			overflow-y: auto;
		}
		div {
			display: flex;
			flex-direction: column;
			label {
				font-size: var(--fs-smallest);
				color: var(--neutral-dark-grey);
			}
			input,
			select {
				padding: 0.5rem;
				border-radius: 0.5rem;
				border: 1px solid var(--neutral-dark-grey);
				font-size: var(--fs-body-sm);
			}
		}

		button {
			background-color: var(--primary-100);
			color: var(--primary-900);
			border-radius: 0.5rem;
			border: 0;
			cursor: pointer;
			padding-block: 1em;
			font-size: var(--fs-body-sm);
			font-weight: var(--fw-bold);
			margin-top: 1rem;
		}
	}
	@media only screen and (min-width: 768px) {
		dialog {
			max-width: 300px;
		}
	}
	@media only screen and (min-width: 1366px) {
		main {
			padding: 2.5rem;
		}
		.potComponentSection {
			display: grid;
			grid-template-columns: 1fr 1fr;
		}
	}
</style>

<script>
	import data from "../data.json";
	document.addEventListener("astro:page-load", () => {
		const addNewPotBtn =
			document.querySelector<HTMLButtonElement>(".addNewPotBtn");
		const addNewPotDialog =
			document.querySelector<HTMLDialogElement>(".addNewPotDialog");
		const closeAddNewPotDialog = document.querySelector<HTMLButtonElement>(
			".closeAddNewPotDialog"
		);
		addNewPotBtn?.addEventListener("click", () => {
			addNewPotDialog?.showModal();
		});

		closeAddNewPotDialog?.addEventListener("click", () => {
			addNewPotDialog?.close();
		});

		const potMenuBtns =
			document.querySelectorAll<HTMLButtonElement>(`.potMenuBtn`);
		const potMenus = document.querySelectorAll<HTMLDivElement>(`.potMenu`);

		potMenuBtns.forEach((button, index) =>
			button.addEventListener("click", () => {
				potMenus[index].classList.toggle("potMenuVisible");
			})
		);

		const editDialogBtns =
			document.querySelectorAll<HTMLButtonElement>(`.editDialogBtn`);
		const deleteDialogBtns =
			document.querySelectorAll<HTMLButtonElement>(`.deleteDialogBtn`);
		const editDialogs =
			document.querySelectorAll<HTMLDialogElement>(`.editDialog`);
		const deleteDialogs =
			document.querySelectorAll<HTMLDialogElement>(`.deleteDialog`);

		editDialogBtns.forEach((button, index) =>
			button.addEventListener("click", () => {
				editDialogs[index].showModal();
			})
		);
		deleteDialogBtns.forEach((button, index) =>
			button.addEventListener("click", () => {
				deleteDialogs[index].showModal();
			})
		);

		const closeEditDialogBtn =
			document.querySelectorAll<HTMLButtonElement>(".closeEditDialog");
		const cancelBtns =
			document.querySelectorAll<HTMLButtonElement>(".cancelBtn");
		const deleteDialogCloseBtns =
			document.querySelectorAll<HTMLButtonElement>(".deleteDialogClose");

		deleteDialogCloseBtns.forEach((button, index) => {
			button.addEventListener("click", () => {
				deleteDialogs[index].close();
				potMenus[index].classList.toggle("potMenuVisible");
			});
		});

		cancelBtns.forEach((button, index) => {
			button.addEventListener("click", () => {
				deleteDialogs[index].close();
				potMenus[index].classList.toggle("potMenuVisible");
			});
		});
		closeEditDialogBtn.forEach((button, index) => {
			button.addEventListener("click", () => {
				editDialogs[index].close();
				potMenus[index].classList.toggle("potMenuVisible");
			});
		});

		const addMoneyBtns =
			document.querySelectorAll<HTMLButtonElement>(`.addMoneyBtn`);
		const addMoneyDialogs =
			document.querySelectorAll<HTMLDialogElement>(`.addMoneyDialog`);

		addMoneyBtns.forEach((button, index) => {
			button.addEventListener("click", () => {
				addMoneyDialogs[index].showModal();
			});
		});
		const withdrawBtns =
			document.querySelectorAll<HTMLButtonElement>(`.withdrawBtn`);
		const withdrawDialogs =
			document.querySelectorAll<HTMLDialogElement>(`.withdrawDialog`);

		withdrawBtns.forEach((button, index) => {
			button.addEventListener("click", () => {
				withdrawDialogs[index].showModal();
			});
		});

		const closeAddMoneyDialogBtns =
			document.querySelectorAll<HTMLButtonElement>(".addMoneyDialogClose");
		closeAddMoneyDialogBtns.forEach((button, index) => {
			button.addEventListener("click", () => {
				addMoneyDialogs[index].close();
			});
		});

		const closeWithdrawDialogBtns =
			document.querySelectorAll<HTMLButtonElement>(".withdrawDialogClose");
		closeWithdrawDialogBtns.forEach((button, index) => {
			button.addEventListener("click", () => {
				withdrawDialogs[index].close();
			});
		});

		const addMoneyForms =
			document.querySelectorAll<HTMLFormElement>(`.addMoneyForm`);

		const addMoneyInputs =
			document.querySelectorAll<HTMLInputElement>(`.amountToAddInput`);
		const newAmounts =
			document.querySelectorAll<HTMLInputElement>(`.newAmount`);

		const progressAddMoneys =
			document.querySelectorAll<HTMLDivElement>(`.progressAddMoney`);

		const targets = document.querySelectorAll<HTMLDivElement>(".targetVar");

		const addMoneyPercentages =
			document.querySelectorAll<HTMLDivElement>(`.addMoneyPercentage`);

		addMoneyInputs.forEach((input, index) => {
			let initialValue = Number(newAmounts[index].innerHTML.slice(1));

			input.addEventListener("change", (e) => {
				newAmounts[index].innerHTML = "$" + String(initialValue);
				let oldAmount = Number(newAmounts[index].innerHTML.slice(1));
				if (Number(input.value) > Number(data.balance.current)) {
					input.value = "";
					newAmounts[index].innerHTML = "$" + String(oldAmount);
					return;
				}

				newAmounts[index].innerHTML = "";

				newAmounts[index].innerHTML =
					"$" + String(oldAmount + Number(input.value));

				addMoneyPercentages[index].innerHTML = String(
					(
						((oldAmount + Number(input.value)) /
							Number(targets[index].innerHTML)) *
						100
					).toFixed(2) + "%"
				);
				progressAddMoneys[index].setAttribute(
					"style",
					`width:${
						String(
							(
								((oldAmount + Number(input.value)) /
									Number(targets[index].innerHTML)) *
								100
							).toFixed(2)
						) + "%"
					}; background-color: var(--secondary-green);`
				);
			});
		});

		const withdrawMoneyForms =
			document.querySelectorAll<HTMLFormElement>(`.withdrawForm`);

		const withdrawMoneyInputs =
			document.querySelectorAll<HTMLInputElement>(`.withdrawMoneyInput`);

		const withdrawNewAmounts =
			document.querySelectorAll<HTMLInputElement>(`.withdrawNewAmount`);

		const progressWithdrawMoneys = document.querySelectorAll<HTMLDivElement>(
			`.progressWithdrawMoney`
		);

		const withdrawMoneyPercentages = document.querySelectorAll<HTMLDivElement>(
			`.withdrawMoneyPercentage`
		);

		withdrawMoneyInputs.forEach((input, index) => {
			let initialValue = Number(withdrawNewAmounts[index].innerHTML.slice(1));

			input.addEventListener("change", (e) => {
				withdrawNewAmounts[index].innerHTML = "$" + String(initialValue);
				let oldAmount = Number(withdrawNewAmounts[index].innerHTML.slice(1));
				if (Number(input.value) > oldAmount || Number(input.value) < 0) {
					input.value = "";
					withdrawNewAmounts[index].innerHTML = "$" + String(oldAmount);
					return;
				}

				withdrawNewAmounts[index].innerHTML = "";

				withdrawNewAmounts[index].innerHTML =
					"$" + String(oldAmount - Number(input.value));

				withdrawMoneyPercentages[index].innerHTML = String(
					(
						((oldAmount - Number(input.value)) /
							Number(targets[index].innerHTML)) *
						100
					).toFixed(2) + "%"
				);
				progressWithdrawMoneys[index].setAttribute(
					"style",
					`width:${
						String(
							(
								((oldAmount - Number(input.value)) /
									Number(targets[index].innerHTML)) *
								100
							).toFixed(2)
						) + "%"
					}; background-color: var(--secondary-red);`
				);
			});
		});
	});
</script>
