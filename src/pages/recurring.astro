---
import Layout from "../layouts/Layout.astro";
import data from "../data.json";
import BillsComponent from "@components/BillsComponent.astro";
import type TransactionType from "@lib/transaction";
import type RecurringBill from "@lib/recurringBill";
const url = Astro.url;
const params = url.searchParams;

if (!params.get("sorting")) {
	params.set("sorting", "Latest");
	params.set("name", "");
	Astro.url.search = params.toString();
}

const uniqueTransactions: any = {};
const filteredTransactions: TransactionType[] = [];

data.transactions.forEach((transaction) => {
	if (!transaction.recurring) return;
	if (!uniqueTransactions[transaction.name]) {
		uniqueTransactions[transaction.name] = true;
		filteredTransactions.push(transaction);
	}
});

filteredTransactions.sort((a, b) => {
	// @ts-ignore
	return new Date(a.date).getDate() - new Date(b.date).getDate();
});

const date = new Date("2024-08-28T22:00:00.000Z");
const finalBills: RecurringBill[] = [];

filteredTransactions.forEach((transaction) => {
	const transactionDate = new Date(transaction.date);
	let daysDiff = transactionDate.getDate() - date.getDate();
	const todaysDateAsDay = date.getDate();
	const billAsDay = transactionDate.getDate();

	let billPaid: boolean = false;
	let billDue: boolean = false;
	if (todaysDateAsDay > billAsDay) {
		billPaid = true;
	}
	if (
		(billAsDay > todaysDateAsDay && Math.abs(daysDiff) < 5) ||
		billAsDay === todaysDateAsDay
	) {
		billDue = true;
	}
	const finalBill: RecurringBill = {
		avatar: transaction.avatar,
		amount: transaction.amount,
		category: transaction.category,
		name: transaction.name,
		date: transaction.date,
		recurring: transaction.recurring,
		billDue: billDue,
		billPaid: billPaid,
		daysDiff: daysDiff,
	};
	finalBills.push(finalBill);
});

let paidBillsCost: number = 0;
let paidBillsAmount: number = 0;

let dueBillsCost: number = 0;
let dueBillsAmount: number = 0;

let totalUpcoming: number = 0;
let totalUpcomingAmount: number = 0;

finalBills.forEach((bill) => {
	if (bill.billPaid) {
		paidBillsCost += bill.amount;
		paidBillsAmount++;
	}

	if (bill.billDue) {
		dueBillsCost += bill.amount;
		dueBillsAmount++;
	}
	if ((!bill.billDue && !bill.billPaid) || bill.billDue) {
		totalUpcoming += bill.amount;
		totalUpcomingAmount++;
	}
});

let totalBills: number = 0;
finalBills.forEach((transaction) => {
	if (transaction.recurring === true) {
		totalBills += transaction.amount;
	}
});

switch (params.get("sorting")) {
	case "Latest":
		break;
	case "Oldest":
		finalBills.reverse();
		break;
	case "A_to_Z":
		finalBills.sort((a: TransactionType, b: TransactionType) => {
			return a.name.localeCompare(b.name);
		});
		break;
	case "Z_to_A":
		finalBills.sort((a: TransactionType, b: TransactionType) => {
			return b.name.localeCompare(a.name);
		});
		break;
	case "Lowest":
		finalBills.sort((a: TransactionType, b: TransactionType) => {
			return b.amount - a.amount;
		});
		break;
	case "Highest":
		finalBills.sort((a: TransactionType, b: TransactionType) => {
			return a.amount - b.amount;
		});
		break;
	default:
		break;
}

let tempArray: RecurringBill[] = [];
finalBills.forEach((element, index) => {
	const searchedName = params.get("name");
	if (!searchedName) return;
	if (element.name.toLowerCase().includes(searchedName.toLowerCase())) {
		tempArray.push(element);
	} else {
		finalBills.slice(index, 1);
	}
});

if (tempArray.length !== 0) {
	finalBills.length = 0;
	finalBills.push(...tempArray);
}

if (tempArray.length === 0 && params.get("name")) {
	finalBills.length = 0;
}

totalBills = totalBills * -1;
---

<Layout title="Welcome to Astro.">
	<main>
		<h1>Recurring Bills</h1>
		<section class="topSectionWrapper">
			<section class="headerSection">
				<div><img src="/images/icon-recurring-bills.svg" alt="" /></div>
				<div>
					<p>Total bills</p>
					<h2>${totalBills}</h2>
				</div>
			</section>
			<section class="summarySection">
				<h3 class="sectionTitle">Summary</h3>
				<div class="summaryWrapper">
					<div>
						<p>Paid Bills</p>
						<h3>{paidBillsAmount} (${(paidBillsCost * -1).toFixed(2)})</h3>
					</div>
					<hr />
					<div>
						<p>Total Upcoming</p>
						<h3>{totalUpcomingAmount} (${(totalUpcoming * -1).toFixed(2)})</h3>
					</div>
					<hr />
					<div>
						<p>Due Soon</p>
						<h3>{dueBillsAmount} (${(dueBillsCost * -1).toFixed(2)})</h3>
					</div>
				</div>
			</section>
		</section>

		<section class="billsSection">
			<form class="searchAndSorting">
				<div class="inputWrapper">
					<input
						value={params.get("name")}
						type="text"
						name="name"
						placeholder="Search transactions"
					/>
					<button type="submit"
						><img src="/images/icon-search.svg" alt="Submit" /></button
					>
				</div>
				<div class="sortingWrapper">
					<label class="desktopOnly" for="sortingSelect">Sort by</label>
					<button class="mobileOnly sortingBtn" type="button"
						><img src="/images/icon-sort-mobile.svg" alt="Submit" /></button
					>
					<select
						onchange="this.form.submit()"
						name="sorting"
						id="sortingSelect">
						<option selected={params.get("sorting") === "Latest"} value="Latest"
							>Latest</option
						>
						<option selected={params.get("sorting") === "Oldest"} value="Oldest"
							>Oldest</option
						>
						<option selected={params.get("sorting") === "A_to_Z"} value="A_to_Z"
							>A to Z</option
						>
						<option selected={params.get("sorting") === "Z_to_A"} value="Z_to_A"
							>Z to A</option
						>
						<option
							selected={params.get("sorting") === "Highest"}
							value="Highest">Highest</option
						>
						<option selected={params.get("sorting") === "Lowest"} value="Lowest"
							>Lowest</option
						>
					</select>
				</div>
			</form>
			<div class="billsHeader">
				<h3>Bill title</h3>
				<h3>Due Date</h3>
				<h3>Amount</h3>
			</div>
			<div class="billsWrapper">
				{
					finalBills.map((transaction) => {
						return <BillsComponent transaction={transaction} />;
					})
				}
			</div>
		</section>
	</main>

	<!-- Add bills data -->
</Layout>

<style lang="scss">
	main {
		display: flex;
		flex-direction: column;
		margin-inline: auto;
		padding: 1rem;
		width: 100%;
		margin-block-end: 5rem;
	}
	h1 {
		font-size: var(--fs-heading-1);
		color: var(--primary-100);
		margin-block: 2rem;
	}

	section {
		background-color: var(--primary-900);
		/* padding-inline: 1rem; */
		padding: 1.25rem;
		border-radius: 0.75rem;
	}

	.headerSection {
		background-color: var(--primary-100);
		color: var(--primary-900);
		padding: 1.25rem;
		display: flex;
		align-items: center;
		gap: 1rem;
		margin-block-end: 1rem;
		h2 {
			font-size: var(--fs-heading-1);
			font-weight: var(--fw-bold);
		}
		p {
			font-size: var(--fs-body-sm);
			font-weight: var(--fw-regular);
		}
	}
	.summarySection {
		margin-bottom: 1rem;
	}
	.sectionTitle {
		font-size: var(--fs-body);
		margin-bottom: 1rem;
	}
	.summaryWrapper {
		display: flex;
		flex-direction: column;
		hr {
			width: 100%;
			opacity: 0.3;
		}
		div {
			display: flex;
			justify-content: space-between;
			padding-block: 1rem;
			h3 {
				font-size: var(--fs-smallest);
				font-weight: var(--fw-bold);
			}
			p {
				font-size: var(--fs-smallest);
				color: var(--neutral-dark-grey);
				font-weight: var(--fw-regular);
			}
			&:last-of-type {
				h3,
				p {
					color: var(--secondary-red);
				}
			}
		}
	}

	.billSection {
		display: flex;
		flex-direction: column;
	}

	form {
		display: flex;
		align-items: center;
		// margin-bottom: 1rem;
	}
	.inputWrapper {
		display: flex;
		border: 1px solid var(--neutral-grey);
		padding: 0.25rem;
		border-radius: 0.75rem;
		margin-right: 1rem;
		font-size: var(--fs-body-sm);
		transition: 150ms linear;
		margin-left: 0.25rem;
		&:has(input:focus),
		&:has(input:hover),
		&:has(input:active) {
			& {
				border: 1px solid var(--primary-100);
				transition: 150ms linear;
			}
		}
		input {
			border: none;
			padding: 0.5rem;
			&:focus,
			&:active {
				border: 0;
				outline: 0;
			}
		}
		button {
			border: none;
			display: grid;
			place-items: center;
			background-color: transparent;
			padding: 0;
			width: 2rem;
			height: 2rem;
			aspect-ratio: 1;
			padding: 0;
			img {
				aspect-ratio: 1;
				height: 1rem;
			}
			cursor: pointer;
		}
	}

	#sortingSelect {
		display: none;
		position: fixed;
		padding: 1rem;
		border-radius: 0.75rem;
		border: 1px solid var(--neutral-grey);
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		box-shadow: 0px 0px 1000px 50px var(--primary-100);
	}

	#sortingSelect {
		top: 20%;
	}
	#sortingSelect.displaySelect {
		display: flex;
	}

	.sortingBtn {
		border: 0;
		background-color: transparent;
		min-width: 10vw;
	}
	.sortingWrapper {
		margin-left: auto;
	}

	.sortingWrapper {
		display: grid;
		place-items: center;
		width: fit-content;
		height: fit-content;
	}
	.topSectionWrapper {
		padding: 0;
		background-color: transparent;
	}
	.billsHeader {
		display: none;
	}
	.desktopOnly {
		display: none;
	}
	.mobileOnly {
		display: flex;
	}
	@media only screen and (min-width: 768px) {
		.desktopOnly {
			display: block;
		}
		.mobileOnly {
			display: none;
		}
		main {
			padding-inline: 2.5rem;
		}
		.topSectionWrapper {
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			gap: 1rem;
			section {
				width: calc(50% - 0.5rem);
			}
		}
		.headerSection {
			display: flex;
			flex-direction: column;
			align-items: flex-start;
			justify-content: space-around;
			padding-inline: 2rem;
			img {
				width: 2.5rem;
			}
		}
		#categorySelect,
		#sortingSelect {
			display: flex;
			position: relative;
			padding: 0.5rem;
			border-radius: 0.75rem;
			border: 1px solid var(--neutral-grey);
			top: initial;
			left: initial;
			transform: none;
			box-shadow: none;
		}

		#sortingSelect {
			top: initial;
		}
		#sortingSelect.displaySelect,
		#categorySelect.displaySelect {
			display: flex;
		}

		select {
			padding: 0.5rem;
			border-radius: 0.5rem;
			border: 1px solid var(--neutral-grey);
			font-size: var(--fs-body-sm);
			color: var(--primary-100);
			cursor: pointer;
			transition: 150ms ease-in;
			&:focus,
			&:active,
			&:hover {
				border: 1px solid var(--primary-100);
				transition: 150ms ease-in;
			}
		}
		label {
			color: var(--primary-100);
			font-size: var(--fs-body-sm);
		}
		option {
			font-size: var(--fs-smallest);
			padding: 1rem 0.5rem;
			margin-block: 1rem;
			border: 0;
			width: fit-content;
			cursor: pointer;
			&:focus,
			&:active,
			&:hover {
				border: 1px solid var(--primary-100);
			}
		}

		.filteringWrapper,
		.sortingWrapper {
			display: flex;
			gap: 1rem;
			padding-inline: 0.5rem;
		}
		.billsHeader {
			display: grid;
			grid-template-columns: repeat(4, 1fr);
			margin-block: 2rem 1rem;
			h3 {
				font-size: var(--fs-smallest);
				color: var(--neutral-dark-grey);
				font-weight: var(--fw-regular);
				&:first-of-type {
					grid-column: 1 / span 2;
				}
				&:last-of-type {
					grid-column: 4;
					text-align: right;
				}
			}
		}
	}
	@media only screen and (min-width: 1366px) {
		main {
			display: grid;
			grid-template-columns: repeat(3, 1fr);
			grid-template-rows: auto 1fr;
			gap: 0 3rem;
		}
		h1 {
			height: fit-content;
			margin-block: 2rem;
		}
		.billsSection {
			grid-column: 2 / span 2;
			width: 100%;
			height: fit-content;
		}
		.headerSection {
			padding-block: 2rem;
			gap: 2rem;
			justify-content: space-between;
		}
		.topSectionWrapper {
			grid-column: 1;
			display: flex;
			flex-direction: column;
			justify-content: initial;
			section {
				width: 100%;
			}
		}
		.inputWrapper {
			max-width: 25vw;
		}
	}
	@media screen and (min-width: 1920px) {
		main {
			padding-inline: 5rem;
		}
		.summaryWrapper {
			div {
				p {
					font-size: var(--fs-body-sm);
				}
				h3 {
					font-size: var(--fs-body);
				}
			}
		}
		.inputWrapper {
			gap: 0.5rem;
			input {
				font-size: var(--fs-body-sm);
				padding: 0.5rem 1rem;
			}
			button {
				margin-right: 0.5rem;
			}
		}
		select,
		label,
		option {
			font-size: var(--fs-body);
		}

		.billsHeader {
			h3 {
				font-size: var(--fs-body-sm);
			}
		}

		.sectionTitle {
			font-size: var(--fs-heading-2);
		}
	}
</style>

<script>
	document.addEventListener("astro:page-load", () => {
		const sortingBtn = document.querySelector<HTMLButtonElement>(".sortingBtn");

		const sortingSelect =
			document.querySelector<HTMLSelectElement>("#sortingSelect");

		sortingBtn?.addEventListener("click", () => {
			sortingSelect?.classList.add("displaySelect");
		});
	});
</script>
