---
import Layout from "../layouts/Layout.astro";
import data from "../data.json";
import BillsComponent from "@components/BillsComponent.astro";
import type TransactionType from "@lib/transaction";
import type RecurringBill from "@lib/recurringBill";

const uniqueTransactions: any = {};
const filteredTransactions: TransactionType[] = [];

data.transactions.forEach((transaction) => {
	if (!transaction.recurring) return;
	if (!uniqueTransactions[transaction.name]) {
		uniqueTransactions[transaction.name] = true;
		filteredTransactions.push(transaction);
	}
});

filteredTransactions.sort((a, b) => {
	// @ts-ignore
	return new Date(a.date).getDate() - new Date(b.date).getDate();
});

const date = new Date("2024-08-28T22:00:00.000Z");
const finalBills: RecurringBill[] = [];

filteredTransactions.forEach((transaction) => {
	const transactionDate = new Date(transaction.date);
	let daysDiff = transactionDate.getDate() - date.getDate();
	const todaysDateAsDay = date.getDate();
	const billAsDay = transactionDate.getDate();

	let billPaid: boolean = false;
	let billDue: boolean = false;
	if (todaysDateAsDay > billAsDay) {
		billPaid = true;
	}
	if (
		(billAsDay > todaysDateAsDay && Math.abs(daysDiff) < 5) ||
		billAsDay === todaysDateAsDay
	) {
		billDue = true;
	}
	const finalBill: RecurringBill = {
		avatar: transaction.avatar,
		amount: transaction.amount,
		category: transaction.category,
		name: transaction.name,
		date: transaction.date,
		recurring: transaction.recurring,
		billDue: billDue,
		billPaid: billPaid,
		daysDiff: daysDiff,
	};
	finalBills.push(finalBill);
});

let paidBillsCost: number = 0;
let paidBillsAmount: number = 0;

let dueBillsCost: number = 0;
let dueBillsAmount: number = 0;

let totalUpcoming: number = 0;
let totalUpcomingAmount: number = 0;

finalBills.forEach((bill) => {
	if (bill.billPaid) {
		paidBillsCost += bill.amount;
		paidBillsAmount++;
	}

	if (bill.billDue) {
		dueBillsCost += bill.amount;
		dueBillsAmount++;
	}
	if ((!bill.billDue && !bill.billPaid) || bill.billDue) {
		totalUpcoming += bill.amount;
		totalUpcomingAmount++;
	}
});

let totalBills: number = 0;
finalBills.forEach((transaction) => {
	if (transaction.recurring === true) {
		totalBills += transaction.amount;
	}
});
totalBills = totalBills * -1;
---

<Layout title="Welcome to Astro.">
	<main>
		<h1>Recurring Bills</h1>
		<section class="topSectionWrapper">
			<section class="headerSection">
				<div><img src="/images/icon-recurring-bills.svg" alt="" /></div>
				<div>
					<p>Total bills</p>
					<h2>${totalBills}</h2>
				</div>
			</section>
			<section class="summarySection">
				<h3 class="sectionTitle">Summary</h3>
				<div class="summaryWrapper">
					<div>
						<p>Paid Bills</p>
						<h3>{paidBillsAmount} (${(paidBillsCost * -1).toFixed(2)})</h3>
					</div>
					<hr />
					<div>
						<p>Total Upcoming</p>
						<h3>{totalUpcomingAmount} (${(totalUpcoming * -1).toFixed(2)})</h3>
					</div>
					<hr />
					<div>
						<p>Due Soon</p>
						<h3>{dueBillsAmount} (${(dueBillsCost * -1).toFixed(2)})</h3>
					</div>
				</div>
			</section>
		</section>

		<section class="billsSection">
			<form class="searchAndSorting">
				<div class="inputWrapper">
					<input type="text" placeholder="Search bills" />
					<button>
						<img src="/images/icon-search.svg" alt="" />
					</button>
				</div>
				<div class="selectWrapper">
					<label for="sorting">Sort by</label>
					<select name="sorting" id="sorting">
						<option value="latest">Latest</option>
						<option value="oldest">Oldest</option>
						<option value="a_to_z">A to Z</option>
						<option value="z_to_a">Z to A</option>
						<option value="highest">Highest</option>
						<option value="lowest">Lowest</option>
					</select>
					<button class="sortingBtn">
						<img src="/images/icon-sort-mobile.svg" alt="" />
					</button>
				</div>
			</form>
			<div class="billsHeader">
				<h3>Bill title</h3>
				<h3>Due Date</h3>
				<h3>Amount</h3>
			</div>
			<div class="billsWrapper">
				{
					finalBills.map((transaction) => {
						return <BillsComponent transaction={transaction} />;
					})
				}
			</div>
		</section>
	</main>

	<!-- Add bills data -->
</Layout>

<style lang="scss">
	main {
		display: flex;
		flex-direction: column;
		margin-inline: auto;
		padding: 1rem;
		width: 100%;
		margin-block-end: 5rem;
	}
	h1 {
		font-size: var(--fs-heading-1);
		color: var(--primary-100);
		margin-block: 2rem;
	}

	section {
		background-color: var(--primary-900);
		/* padding-inline: 1rem; */
		padding: 1.25rem;
		border-radius: 0.75rem;
	}

	.headerSection {
		background-color: var(--primary-100);
		color: var(--primary-900);
		padding: 1.25rem;
		display: flex;
		align-items: center;
		gap: 1rem;
		margin-block-end: 1rem;
		h2 {
			font-size: var(--fs-heading-1);
			font-weight: var(--fw-bold);
		}
		p {
			font-size: var(--fs-body-sm);
			font-weight: var(--fw-regular);
		}
	}
	.summarySection {
		margin-bottom: 1rem;
	}
	.sectionTitle {
		font-size: var(--fs-body);
		margin-bottom: 1rem;
	}
	.summaryWrapper {
		display: flex;
		flex-direction: column;
		hr {
			width: 100%;
			opacity: 0.3;
		}
		div {
			display: flex;
			justify-content: space-between;
			padding-block: 1rem;
			h3 {
				font-size: var(--fs-smallest);
				font-weight: var(--fw-bold);
			}
			p {
				font-size: var(--fs-smallest);
				color: var(--neutral-dark-grey);
				font-weight: var(--fw-regular);
			}
			&:last-of-type {
				h3,
				p {
					color: var(--secondary-red);
				}
			}
		}
	}

	.billSection {
		display: flex;
		flex-direction: column;
	}
	.searchAndSorting {
		display: flex;
		align-items: center;
		width: 100%;
		justify-content: space-between;
		margin-bottom: 1rem;
		select,
		label {
			display: none;
		}
	}
	.inputWrapper {
		display: flex;
		border: 1px solid var(--neutral-grey);
		padding: 0.5rem;
		border-radius: 0.75rem;
		margin-right: 1rem;
		font-size: var(--fs-body-sm);
		max-width: 80vw;
		flex-grow: 1;
		input {
			border: none;
			background-color: transparent;
			flex-grow: 1;
			font-size: var(--fs-smallest);
		}
		button {
			border: none;
			background-color: transparent;
			padding: 0;
			width: 1rem;
			aspect-ratio: 1;
			img {
				aspect-ratio: 1;
				height: 1rem;
			}
		}
	}

	.sortingBtn {
		border: 0;
		background-color: transparent;
		min-width: 10vw;
	}
	.topSectionWrapper {
		padding: 0;
		background-color: transparent;
	}
	.billsHeader {
		display: none;
	}
	@media only screen and (min-width: 768px) {
		main {
			padding-inline: 2.5rem;
		}
		.topSectionWrapper {
			display: flex;
			flex-direction: row;
			justify-content: space-between;
			gap: 1rem;
			section {
				width: calc(50% - 0.5rem);
			}
		}
		.headerSection {
			display: flex;
			flex-direction: column;
			align-items: flex-start;
			justify-content: space-around;
			padding-inline: 2rem;
			img {
				width: 2.5rem;
			}
		}
		.inputWrapper {
			max-width: 50vw;
			// padding: 0.75rem;
			input {
			}
		}
		.sortingBtn {
			display: none;
		}
		.searchAndSorting {
			display: flex;

			label,
			select {
				display: block;
			}
		}
		.selectWrapper {
			display: flex;
			align-items: center;
			gap: 0.5rem;
		}
		select {
			padding: 0.5rem;
			border-radius: 0.5rem;
			border: 1px solid var(--neutral-grey);
			font-size: var(--fs-body-sm);
			color: var(--primary-100);
		}
		label {
			color: var(--primary-100);
			font-size: var(--fs-body-sm);
			height: fit-content;
		}
		option {
			font-size: var(--fs-smallest);
			padding: 1rem 0.5rem;
			margin-block: 1rem;
			border: 0;
			width: fit-content;
		}
		.billsHeader {
			display: grid;
			grid-template-columns: repeat(4, 1fr);
			margin-block: 2rem 1rem;
			h3 {
				font-size: var(--fs-smallest);
				color: var(--neutral-dark-grey);
				font-weight: var(--fw-regular);
				&:first-of-type {
					grid-column: 1 / span 2;
				}
				&:last-of-type {
					grid-column: 4;
					text-align: right;
				}
			}
		}
	}
	@media only screen and (min-width: 1366px) {
		main {
			display: grid;
			grid-template-columns: repeat(3, 1fr);
			grid-template-rows: auto 1fr;
			gap: 0 3rem;
		}
		h1 {
			height: fit-content;
			margin-block: 2rem;
		}
		.billsSection {
			grid-column: 2 / span 2;
			width: 100%;
			height: fit-content;
		}
		.headerSection {
			padding-block: 2rem;
			gap: 2rem;
			justify-content: space-between;
		}
		.topSectionWrapper {
			grid-column: 1;
			display: flex;
			flex-direction: column;
			justify-content: initial;
			section {
				width: 100%;
			}
		}
		.inputWrapper {
			max-width: 25vw;
		}
	}
	@media screen and (min-width: 1920px) {
		main {
			padding-inline: 5rem;
		}
		.summaryWrapper {
			div {
				p {
					font-size: var(--fs-body-sm);
				}
				h3 {
					font-size: var(--fs-body);
				}
			}
		}
		.inputWrapper {
			gap: 0.5rem;
			input {
				font-size: var(--fs-body-sm);
				padding: 0.5rem 1rem;
			}
			button {
				margin-right: 0.5rem;
			}
		}
		select,
		label,
		option {
			font-size: var(--fs-body);
		}

		.billsHeader {
			h3 {
				font-size: var(--fs-body-sm);
			}
		}

		.sectionTitle {
			font-size: var(--fs-heading-2);
		}
	}
</style>
