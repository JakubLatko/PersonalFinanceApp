---
import Layout from "../layouts/Layout.astro";
import Transaction from "@components/Transaction.astro";
import data from "src/data.json";
import type TransactionType from "@lib/transaction.ts";

const url = Astro.url;
const params = url.searchParams;

if (!params.get("category") || !params.get("sorting")) {
	params.set("category", "All");
	params.set("sorting", "Latest");
	params.set("name", "");
	Astro.url.search = params.toString();
}

if (!params.get("page")) {
	params.set("page", "1");
}

let currentPage = Number(params.get("page"));

const dataToShow: TransactionType[] = [];
data.transactions.forEach((element) => {
	if (params.get("category") == "All") {
		dataToShow.push(element);
		return;
	}
	if (element.category === params.get("category")) {
		dataToShow.push(element);
	} else {
	}
});

switch (params.get("sorting")) {
	case "Latest":
		dataToShow.sort((a: TransactionType, b: TransactionType) => {
			//@ts-ignore
			return new Date(b.date) - new Date(a.date);
		});
		break;
	case "Oldest":
		dataToShow.sort((a: TransactionType, b: TransactionType) => {
			//@ts-ignore
			return new Date(a.date) - new Date(b.date);
		});
		break;
	case "A_to_Z":
		dataToShow.sort((a: TransactionType, b: TransactionType) => {
			return a.name.localeCompare(b.name);
		});
		break;
	case "Z_to_A":
		dataToShow.sort((a: TransactionType, b: TransactionType) => {
			return b.name.localeCompare(a.name);
		});
		break;
	case "Highest":
		dataToShow.sort((a: TransactionType, b: TransactionType) => {
			return b.amount - a.amount;
		});
		break;
	case "Lowest":
		dataToShow.sort((a: TransactionType, b: TransactionType) => {
			return a.amount - b.amount;
		});
		break;
	default:
		break;
}

let tempArray: TransactionType[] = [];
dataToShow.forEach((element, index) => {
	const searchedName = params.get("name");
	if (!searchedName) return;
	if (element.name.toLowerCase().includes(searchedName.toLowerCase())) {
		tempArray.push(element);
	} else {
		dataToShow.slice(index, 1);
	}
});

if (tempArray.length !== 0) {
	dataToShow.length = 0;
	dataToShow.push(...tempArray);
}

if (tempArray.length === 0 && params.get("name")) {
	dataToShow.length = 0;
}

let paginationButtons: number[] = [];
for (let i = 0; i < dataToShow.length / 10; i++) {
	paginationButtons.push(i + 1);
}

const prevPage = currentPage > 1 ? currentPage - 1 : null;
const nextPage = currentPage < dataToShow.length / 10 ? currentPage + 1 : null;
function getPageUrl(currentPage: number) {
	const updatedParams = new URLSearchParams(params);
	updatedParams.set("page", String(currentPage));
	return `?${updatedParams.toString()}`;
}

const prevPageUrl = prevPage ? getPageUrl(prevPage) : null;
const nextPageUrl = nextPage ? getPageUrl(nextPage) : null;
---

<Layout title="finance | Transactions">
	<main>
		<h1>Transactions</h1>
		<section>
			<form>
				<div class="inputWrapper">
					<input
						value={params.get("name")}
						type="text"
						name="name"
						placeholder="Search transactions"
					/>
					<button type="submit"
						><img src="/images/icon-search.svg" alt="Submit" /></button
					>
				</div>
				<div class="sortingWrapper">
					<label class="desktopOnly" for="sortingSelect">Sort by</label>
					<button class="mobileOnly sortingBtn" type="button"
						><img src="/images/icon-sort-mobile.svg" alt="Submit" /></button
					>
					<select
						onchange="this.form.submit()"
						name="sorting"
						id="sortingSelect">
						<option selected={params.get("sorting") === "Latest"} value="Latest"
							>Latest</option
						>
						<option selected={params.get("sorting") === "Oldest"} value="Oldest"
							>Oldest</option
						>
						<option selected={params.get("sorting") === "A_to_Z"} value="A_to_Z"
							>A to Z</option
						>
						<option selected={params.get("sorting") === "Z_to_A"} value="Z_to_A"
							>Z to A</option
						>
						<option
							selected={params.get("sorting") === "Highest"}
							value="Highest">Highest</option
						>
						<option selected={params.get("sorting") === "Lowest"} value="Lowest"
							>Lowest</option
						>
					</select>
				</div>
				<div class="filteringWrapper">
					<label class="desktopOnly" for="categorySelect">Category</label>
					<button class="mobileOnly filteringBtn" type="button"
						><img
							src="/images/icon-filter-mobile.svg"
							alt="Filter by category"
						/></button
					>
					<select
						onchange="this.form.submit()"
						name="category"
						id="categorySelect">
						<option selected={params.get("category") === "All"} value="All"
							>All</option
						>
						<option
							selected={params.get("category") === "Entertainment"}
							value="Entertainment">Entertainment</option
						>
						<option selected={params.get("category") === "Bills"} value="Bills"
							>Bills</option
						>
						<option
							selected={params.get("category") === "Groceries"}
							value="Groceries">Groceries</option
						>
						<option
							selected={params.get("category") === "Dining Out"}
							value="Dining Out">Dining Out</option
						>
						<option
							selected={params.get("category") === "Transportation"}
							value="Transportation">Transportation</option
						>
						<option
							selected={params.get("category") === "Personal Care"}
							value="Personal Care">Personal Care</option
						>
						<option
							selected={params.get("category") === "Education"}
							value="Education">Education</option
						>
						<option
							selected={params.get("category") === "Lifestyle"}
							value="Lifestyle">Lifestyle</option
						>
						<option
							selected={params.get("category") === "Shopping"}
							value="Shopping">Shopping</option
						>
						<option
							selected={params.get("category") === "General"}
							value="General">General</option
						>
					</select>
				</div>
			</form>
		</section>
		<section class="contentTable">
			<div class="tableHeaders">
				<h2>Recipient / Sender</h2>
				<h2>Category</h2>
				<h2>Transaction Date</h2>
				<h2>Amount</h2>
			</div>
			<div class="transactionsWrapper">
				{
					dataToShow
						.slice(currentPage * 10 - 10, currentPage * 10)
						.map((element: TransactionType) => (
							<Transaction transaction={element} />
						))
				}
			</div>
		</section>
		<section class="navBtns">
			<a
				href={prevPageUrl}
				class="prevBtn navBtn"
				aria-label={"Go to page previous page"}
				><img src="/images/icon-caret-left.svg" alt="" /><p>Prev</p></a
			>
			<div class="pageBtns">
				{
					paginationButtons.length < 6 && currentPage < 6
						? paginationButtons.map((button) => (
								<a
									class:list={[
										"navBtn pageBtn",
										button === currentPage ? "active" : null,
									]}
									aria-label={"Go to page " + button}
									href={getPageUrl(button)}>
									{button}
								</a>
							))
						: paginationButtons
								.slice(currentPage - 2, currentPage + 3)
								.map((button) => (
									<a
										class:list={[
											"navBtn pageBtn",
											button === currentPage ? "active" : null,
										]}
										aria-label={"Go to page " + button}
										href={getPageUrl(button)}>
										{button}
									</a>
								))
				}
			</div>

			<a
				href={nextPageUrl}
				class="nextBtn navBtn"
				aria-label={"Go to page next page"}
				><p>Next</p> <img src="/images/icon-caret-right.svg" alt="" /></a
			>
		</section>
	</main>
</Layout>

<style lang="scss">
	section:first-of-type {
		border-top-left-radius: 1rem;
		border-top-right-radius: 1rem;
		padding-block: 1rem;
	}
	section:last-of-type {
		border-bottom-left-radius: 1rem;
		border-bottom-right-radius: 1rem;
		padding-block: 1rem;
	}
	section {
		background-color: var(--primary-900);
		padding-inline: 1rem;
	}
	h1 {
		font-size: var(--fs-heading-1);
		color: var(--primary-100);
		margin-bottom: 2rem;
	}
	main {
		width: 100%;
		padding-inline: 1.5rem;
		padding-block: 1.5rem 5rem;
	}
	.desktopOnly {
		display: none;
	}
	form {
		display: flex;
		align-items: center;
		// margin-bottom: 1rem;
	}
	.inputWrapper {
		display: flex;
		border: 1px solid var(--neutral-grey);
		padding: 0.25rem;
		border-radius: 0.75rem;
		margin-right: 1rem;
		font-size: var(--fs-body-sm);
		transition: 150ms linear;
		margin-left: 0.25rem;
		&:has(input:focus),
		&:has(input:hover),
		&:has(input:active) {
			& {
				border: 1px solid var(--primary-100);
				transition: 150ms linear;
			}
		}
		input {
			border: none;
			padding: 0.5rem;
			&:focus,
			&:active {
				border: 0;
				outline: 0;
			}
		}
		button {
			border: none;
			display: grid;
			place-items: center;
			background-color: transparent;
			padding: 0;
			width: 2rem;
			height: 2rem;
			aspect-ratio: 1;
			padding: 0;
			img {
				aspect-ratio: 1;
				height: 1rem;
			}
			cursor: pointer;
		}
	}

	#categorySelect,
	#sortingSelect {
		display: none;
		position: fixed;
		padding: 1rem;
		border-radius: 0.75rem;
		border: 1px solid var(--neutral-grey);
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		box-shadow: 0px 0px 1000px 50px var(--primary-100);
	}

	#sortingSelect {
		top: 20%;
	}
	#sortingSelect.displaySelect,
	#categorySelect.displaySelect {
		display: flex;
	}

	.filteringBtn,
	.sortingBtn {
		border: 0;
		background-color: transparent;
		min-width: 10vw;
	}
	.sortingWrapper {
		margin-left: auto;
	}

	.filteringWrapper,
	.sortingWrapper {
		display: grid;
		place-items: center;
		width: fit-content;
		height: fit-content;
	}
	.navBtns {
		display: flex;
		justify-content: space-between;
		align-items: center;
		color: var(--primary-100);
	}
	.pageBtns {
		display: flex;
		gap: 0.5rem;
		color: var(--primary-100);
	}
	.navBtn {
		aspect-ratio: 1;
		// padding: 1rem;
		border: 1px solid var(--neutral-dark-grey);
		display: flex;
		align-items: center;
		justify-content: center;
		width: 2rem;
		border-radius: 0.25rem;
		text-decoration: none;
		transition: 150ms ease-in-out;
		p {
			display: none;
		}
		img {
			display: block;
		}
		&:hover {
			background-color: var(--neutral-dark-beige);
			transition: 150ms ease-in-out;
			border: 1px solid var(--neutral-dark-beige);
			color: var(--primary-900);
		}
	}
	.navBtn.active {
		background-color: var(--primary-100);
		color: var(--primary-900);
	}
	.tableHeaders {
		display: none;
	}
	.transactionsWrapper {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	@media only screen and (min-width: 768px) {
		.desktopOnly {
			display: block;
		}
		.mobileOnly {
			display: none;
		}
		main {
			padding-inline: 2.5rem;
		}
		section {
			padding-inline: 2rem;
		}
		section:first-of-type {
			padding-block-start: 2rem;
		}
		section:last-of-type {
			padding-block-end: 2rem;
		}
		form {
			justify-content: space-between;
		}
		.tableHeaders {
			display: flex;
			flex-direction: row;
			align-items: center;
			padding-block: 1rem;
			margin-bottom: 1rem;
			h2 {
				font-size: var(--fs-smallest);
				color: var(--neutral-dark-grey);
				font-weight: var(--fw-regular);
			}
			h2:nth-of-type(1) {
				flex-grow: 1;
			}
			h2:nth-of-type(2) {
				width: fit-content;
				// padding-inline: 1.5rem;
				margin-left: 2rem;
			}
			h2:nth-of-type(3) {
				width: fit-content;
				// padding-inline: 1.5rem;
				margin-left: 4rem;
			}
			h2:nth-of-type(4) {
				text-align: right;

				flex-grow: 1;
			}
		}
		.prevBtn,
		.nextBtn {
			width: fit-content;
			display: flex;
			gap: 0.5rem;
			padding-inline: 0.75rem;
			min-height: 2rem;
			aspect-ratio: initial;
			p,
			img {
				display: block;
			}
		}

		#categorySelect,
		#sortingSelect {
			display: flex;
			position: relative;
			padding: 0.5rem;
			border-radius: 0.75rem;
			border: 1px solid var(--neutral-grey);
			top: initial;
			left: initial;
			transform: none;
			box-shadow: none;
		}

		#sortingSelect {
			top: initial;
		}
		#sortingSelect.displaySelect,
		#categorySelect.displaySelect {
			display: flex;
		}

		select {
			padding: 0.5rem;
			border-radius: 0.5rem;
			border: 1px solid var(--neutral-grey);
			font-size: var(--fs-body-sm);
			color: var(--primary-100);
			cursor: pointer;
			transition: 150ms ease-in;
			&:focus,
			&:active,
			&:hover {
				border: 1px solid var(--primary-100);
				transition: 150ms ease-in;
			}
		}
		label {
			color: var(--primary-100);
			font-size: var(--fs-body-sm);
		}
		option {
			font-size: var(--fs-smallest);
			padding: 1rem 0.5rem;
			margin-block: 1rem;
			border: 0;
			width: fit-content;
			cursor: pointer;
			&:focus,
			&:active,
			&:hover {
				border: 1px solid var(--primary-100);
			}
		}

		.filteringWrapper,
		.sortingWrapper {
			display: flex;
			gap: 1rem;
			padding-inline: 0.5rem;
		}
	}
	@media screen and (min-width: 1366px) {
		section {
			padding-inline: 3rem;
		}
		section:first-of-type {
			padding-block-start: 3rem;
		}
		section:last-of-type {
			padding-block-end: 3rem;
		}
		.navBtn {
			color: var(--primary-100);
		}
		.tableHeaders {
			h2:nth-of-type(2) {
				margin-left: 1rem;
			}
			h2:nth-of-type(3) {
				margin-left: 6.5rem;
			}
		}
		.inputWrapper {
			input {
				min-width: 400px;
			}
		}
		.sortingWrapper {
			margin-left: auto;
			margin-right: 2rem;
		}
	}
	@media only screen and (min-width: 2560px) {
		main {
			padding-inline: 5rem;
		}
		h1 {
			margin-top: 5rem;
		}
	}
</style>

<script>
	document.addEventListener("astro:page-load", () => {
		const sortingBtn = document.querySelector<HTMLButtonElement>(".sortingBtn");
		const filteringBtn =
			document.querySelector<HTMLButtonElement>(".filteringBtn");
		const categorySelect =
			document.querySelector<HTMLSelectElement>("#categorySelect");
		const sortingSelect =
			document.querySelector<HTMLSelectElement>("#sortingSelect");

		sortingBtn?.addEventListener("click", () => {
			sortingSelect?.classList.add("displaySelect");
		});

		filteringBtn?.addEventListener("click", () => {
			categorySelect?.classList.add("displaySelect");
		});
	});
</script>
